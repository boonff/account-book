-- Account 表
CREATE TABLE IF NOT EXISTS Account (
    account_id INTEGER PRIMARY KEY AUTOINCREMENT,
    account_name TEXT NOT NULL,  -- 账户名称，如现金、银行卡等
    balance REAL NOT NULL DEFAULT 0,
    created_at TEXT DEFAULT (DATETIME('now'))
);

-- 获取所有账户
queryAllAccount:
SELECT * FROM Account;

-- 插入账户
insertAccount:
INSERT INTO Account (account_name, balance, created_at)
VALUES (:accountName, :balance, :createdAt);

-- 获取某用户的所有账户
queryAccounts:
SELECT * FROM Account;

-- 更新账户余额
updateAccountBalance:
UPDATE Account
SET balance = :balance
WHERE account_id = :accountId;

-- 删除账户
deleteAccount:
DELETE FROM Account WHERE account_id = :accountId;
-- 获取账户余额
queryAccountBalance:
SELECT balance FROM Account WHERE account_id = :accountId;

-- 更新账户名称
updateAccountName:
UPDATE Account
SET account_name = :accountName
WHERE account_id = :accountId;

-- 删除所有账户
deleteAllAccounts:
DELETE FROM Account;

-- TagBox 表
dropTagbox:
DROP TABLE Tagbox;

createTagbox:
CREATE TABLE IF NOT EXISTS Tagbox (
    uuid TEXT PRIMARY KEY,
    name TEXT NOT NULL,
    color INTEGER NOT NULL,
    position INTEGER NOT NULL,
    timestamp INTEGER DEFAULT (strftime('%s', 'now')),  -- 自动设置时间戳
    deleted INTEGER DEFAULT 0
);
createSetPositionTrigger:
CREATE TRIGGER IF NOT EXISTS Setposition
    AFTER INSERT ON Tagbox
    FOR EACH ROW
    BEGIN
        UPDATE Tagbox
        SET position = new.uuid
        WHERE uuid = new.uuid;
    END;
createTagboxTimstampTragger:
CREATE TRIGGER IF NOT EXISTS TagboxTimstamp
    AFTER UPDATE ON Tagbox
    FOR EACH ROW
    BEGIN
        UPDATE Tagbox
        SET timestamp = (strftime('%s', 'now'))
        WHERE uuid = new.uuid;
    END;

dropTagboxTimstampTragger:
DROP TRIGGER IF EXISTS TagboxTimstamp;


-- 示例：插入标签时生成 uuid 和时间戳，默认状态为未删除
insertTagbox:
INSERT INTO Tagbox(uuid, name, color, position, deleted)
VALUES(:uuid, :name, :color, 0, 0);

insertTagboxWithTimetamp:
INSERT INTO Tagbox(uuid, name, color, position, timestamp, deleted)
VALUES(:uuid, :name, :color, :position, :timestamp, :deleted);

-- 查询未软删除的标签
queryUndeletedTagbox:
SELECT * FROM Tagbox WHERE deleted = 0;
queryAllTagbox:
SELECT * FROM Tagbox;

-- 更新标签的 position
updateTagboxPosition:
UPDATE Tagbox
SET position = :position
WHERE uuid = :uuid;

-- 更新标签的 name
updateTagboxName:
UPDATE Tagbox
SET name = :name
WHERE uuid = :uuid;

-- 更新标签的 color
updateTagboxColor:
UPDATE Tagbox
SET color = :color
WHERE uuid = :uuid;

updateTagboxById:
UPDATE Tagbox
SET
    name = :name,
    color = :color,
    position = :position,
    deleted = :deleted
WHERE uuid = :uuid;
-- 更新标签
updateTagboxByUuid:
UPDATE Tagbox
SET
    name = :name,
    color = :color,
    position = :position,
    deleted = :deleted
WHERE uuid = :uuid;


-- 软删除标签
softDeleteTagbox:
UPDATE Tagbox
SET deleted = 1
WHERE uuid = :uuid;

-- 恢复软删除的标签
recoverTagbox:
UPDATE Tagbox
SET deleted = 0
WHERE uuid = :uuid;

-- 删除所有标签（不触发软删除）
deleteAllTagbox:
DELETE FROM Tagbox;

-- 获取未删除的所有标签
deleteAllDeletedTagbox:
SELECT * FROM Tagbox WHERE deleted = 0;


-- Envelope 表
CREATE TABLE IF NOT EXISTS Envelope (
    envelope_id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    total_budget REAL NOT NULL,
    used_budget REAL DEFAULT 0,
    remaining_budget REAL NOT NULL,
    created_at TEXT DEFAULT (DATETIME('now'))
);

-- 插入信封
insertEnvelope:
INSERT INTO Envelope (name, total_budget, used_budget, remaining_budget, created_at)
VALUES (:name, :total_budget, :used_budget, :remaining_budget, :created_at);

-- 更新信封的预算
updateEnvelopeBudget:
UPDATE Envelope
SET total_budget = :total_budget, used_budget = :used_budget, remaining_budget = :remaining_budget
WHERE envelope_id = :envelopeId;

-- 删除信封
deleteEnvelope:
DELETE FROM Envelope WHERE envelope_id = :envelopeId;
-- 获取信封余额
queryEnvelopeBalance:
SELECT remaining_budget FROM Envelope WHERE envelope_id = :envelopeId;

-- 更新信封名称
updateEnvelopeName:
UPDATE Envelope
SET name = :name
WHERE envelope_id = :envelopeId;

-- 删除所有信封
deleteAllEnvelopes:
DELETE FROM Envelope;


-- Bill 表
CREATE TABLE IF NOT EXISTS Bill (
    bill_id INTEGER PRIMARY KEY AUTOINCREMENT,
    envelope_id INTEGER NOT NULL REFERENCES Envelope(envelope_id),
    amount REAL NOT NULL,
    bill_type TEXT NOT NULL,  -- 支出或收入
    bill_date TEXT DEFAULT (DATETIME('now')), -- 交易日期
    payment_method TEXT,  -- 交易支付方式
    description TEXT,
    FOREIGN KEY (envelope_id) REFERENCES Envelope(envelope_id)
);

-- 插入账单
insertBill:
INSERT INTO Bill (envelope_id, amount, bill_type, bill_date, payment_method, description)
VALUES (:envelopeId, :amount, :billType, :billDate, :paymentMethod, :description);

-- 获取某信封下的所有账单
queryBillsByEnvelopeId:
SELECT * FROM Bill WHERE envelope_id = :envelopeId;

-- 更新账单
updateBill:
UPDATE Bill
SET amount = :amount, bill_type = :billType, bill_date = :billDate, payment_method = :paymentMethod, description = :description
WHERE bill_id = :billId;

-- 删除账单
deleteBill:
DELETE FROM Bill WHERE bill_id = :billId;
-- 根据账单类型获取账单
queryBillsByType:
SELECT * FROM Bill WHERE bill_type = :billType;

-- 获取某一日期范围内的账单
queryBillsByDateRange:
SELECT * FROM Bill WHERE bill_date BETWEEN :startDate AND :endDate;

-- 获取账单总额
queryBillTotalAmount:
SELECT SUM(amount) FROM Bill;